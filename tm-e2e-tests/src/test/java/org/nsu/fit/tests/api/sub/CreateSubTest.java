package org.nsu.fit.tests.api.sub;

import com.github.javafaker.Faker;
import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.PlanPojo;
import org.nsu.fit.services.rest.data.SubscriptionPojo;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.List;

import static org.testng.Assert.assertNotEquals;
import static org.testng.AssertJUnit.assertEquals;
import static org.testng.AssertJUnit.assertNotNull;

public class CreateSubTest {
    private RestClient restClient;
    private AccountTokenPojo adminToken;
    private PlanPojo planPojo;
    private CustomerPojo customerPojo;
    private AccountTokenPojo customerToken;
    private SubscriptionPojo subscriptionPojo;

    @BeforeClass
    public void beforeClass() {
        restClient = new RestClient();
    }

    @Test(description = "Authenticate as admin")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Create subscription feature")
    public void authAsAdminTest() {
        adminToken = restClient.authenticate("admin", "setup");
        assertNotNull(adminToken);
    }

    @Test(description = "Create plan as admin", dependsOnMethods = "authAsAdminTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Create subscription feature")
    public void createPlanTest() {
        Faker faker = new Faker();
        planPojo = new PlanPojo();
        planPojo.details = faker.commerce().productName();
        planPojo.name = faker.name().title();
        planPojo.fee = faker.number().numberBetween(1, 10);

        PlanPojo result = restClient.createPlan(adminToken, planPojo);
        assertNotNull(restClient);
        assertEquals(planPojo.name, result.name);
        assertEquals(planPojo.details, result.details);
        assertEquals(planPojo.fee, result.fee);
        planPojo.id = result.id;
    }

    @Test(description = "Create new customer by admin", dependsOnMethods = "authAsAdminTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Create subscription feature")
    public void customerCreateTest() {
        Faker faker = new Faker();
        customerPojo = new CustomerPojo();
        customerPojo.firstName = faker.name().firstName();
        customerPojo.lastName = faker.name().lastName();
        customerPojo.pass = faker.internet().password(7, 11);
        customerPojo.login = faker.internet().emailAddress();
        customerPojo.balance = faker.number().numberBetween(0, 100);

        CustomerPojo result;
        result = restClient.createCustomer(customerPojo, adminToken);

        assertNotNull(result);
        assertEquals(customerPojo.firstName, result.firstName);
        assertEquals(customerPojo.lastName, result.lastName);
        assertEquals(customerPojo.login, result.login);
        assertEquals(customerPojo.balance, result.balance);
        customerPojo.id = result.id;
    }

    @Test(description = "Authenticate as customer", dependsOnMethods = "customerCreateTest")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Create subscription feature")
    public void authAsCustomerTest() {
        customerPojo = restClient.createAutoGeneratedCustomer(adminToken);
        customerToken = restClient.authenticate(customerPojo.login, customerPojo.pass);
        assertNotNull(customerToken);
    }

    @Test(description = "Create subscription", dependsOnMethods = {"authAsCustomerTest", "createPlanTest"})
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Create subscription feature")
    public void makeSubscriptionTest() {
        SubscriptionPojo pojo = new SubscriptionPojo();
        List<PlanPojo> availablePlans = restClient.getAvailablePlans(customerPojo.login);
        assertNotNull(availablePlans);
        assertNotEquals(availablePlans.size(), 0);

        PlanPojo plan = availablePlans.get(0);
        pojo.planId = plan.id;
        pojo.planName = plan.name;
        pojo.planDetails = plan.details;
        pojo.planFee = plan.fee;

        subscriptionPojo = restClient.createSubscription(customerToken, pojo);
        assertNotNull(subscriptionPojo);
        assertEquals(pojo.planId, subscriptionPojo.planId);
        assertEquals(pojo.planName, subscriptionPojo.planName);
        assertEquals(pojo.planDetails, subscriptionPojo.planDetails);
        assertEquals(pojo.planFee, subscriptionPojo.planFee);
        assertEquals(customerPojo.id, subscriptionPojo.customerId);
    }

    @AfterClass
    public void afterClass() {
        restClient.deleteSubscription(customerToken, subscriptionPojo);
        restClient.deletePlan(adminToken, planPojo);
        restClient.deleteCustomer(customerPojo, adminToken);
    }
}
